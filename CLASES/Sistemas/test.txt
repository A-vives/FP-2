

1. 
cpi '.\Microsoft Edge.lnk' .\prueba
cpi 'C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe' ./prueba

2.
ren .\msedge.exe calc.exe
ren cmd.exe calc.exe

3.
mv .\prueba\calc.exe .\Desktop

new-alias -name "neteja" value "clear-host"

Get-process -name Calculator | fl 

*crear un archivo

New-Item -path .\Desktop\tenedor2

Get-filehash .\Desktop\tenedor2

gci tenedor.txt | select -Property name, Length, LastWriteTime, mode

gci .\tenedor.txt

gci -Path 'C:\Windows\System32' | select -Property *


(gci -Path C:\Windows\System32).count

gci -path C:\Windows\System32 | where {$_.Name -like '*ca*' -and $_.Length -lt 50000}

----------Muestra los archivos que empiezan por ca, tienen un peso menos de 50000 y SELECCIONAMOS los atributos de ultimo acceso y el nombre--------------------
    gci -Path C:\Windows\System32 | where {$_.Name -like '*ca*' -and $_.Length -lt 50000} | select -property LastAccessTime, name

gco

mkdir .\aso, .\aso\cartas, .\aso\fotos, .\aso\cartas\enviadas, .\aso\fotos\verano

ni -Path 

gci | ? ($_.name -like '*a*')

El resultado del gci, se verá filtrado por '?'=where=where-object

donde el nombre empieza por a

CREAR VARIABLES Y ARRAYS y listas

$otravar='hola'

Write-Host 'mira que bien' -ForegroundColor red -BackgroundColor White

Write-Host '$otravar' -ForegroundColor red -BackgroundColor White

$varnum='1','2','3'

--------------lista de archivos que empiezan por a------------
$lista=gci | ? {$_.name -like '*e*'}

------archivos grandes de 200bits----------
gci | ? {$_.length -gt 200}
$mas200=gci | ? {$_.length -gt 200}

MANERAS DE HACER FOR EACH

$lista | ForEach-Object {Write-Host $_.LastAccessTimeUtc}
$mas200 | ForEach {Write-Host $_.LastAccessTimeUtc}

gci | ? ($_.length -gt 200)| % {Write-Host $_.LastAccessTimeUtc} 

$mivector='1','2','3'
$miVector.Count
ForEach ($num in $mivector) {Write-host $num}
    *Este num solo tiene sentido dentro de este foreach*

CONDICIONALES
$search= gci | ? {$_.length -gt 200}
foreach ($obj in $search) {
    if ($search -gt 500) {White-host '$obj' }
}
xdkx81

ESTRUCTURAS DE CONTROL

FOREACH= 

foreach ($obj in $mivector) {
    if ($obj -eq 3) {
    clear-host
    write-host -BackgroundColor red -ForegroundColor Yellow 'el numero es: '$obj
}
}

IF= 

$var='1'
switch($var)

----------------------------- 
$peti=Read-Host 'introduce una palabra'
$final=''
for ($i=$peti.Length-1;$i -ge 0; $i--) {
$final=$final+$peti[$i]
}
Write-Host $final
$var='1'
Switch($var) {
1{
    Write-Host -BackgroundColor Red 'El numero seleccionado es el 1'
    }
2{
    Write-Host -BackgroundColor Red 'El numero seleccionado es el 2'
    }
3{
    Write-Host -BackgroundColor Red 'El numero seleccionado es el 3'
    }
4{
    Write-Host -BackgroundColor Red 'El numero seleccionado es el 4'
    }
5{
    Write-Host -BackgroundColor Red 'El numero seleccionado es el 5'
    }
6{
    Write-Host -BackgroundColor Red 'El numero seleccionado es el 6'
    }
7{
    Write-Host -BackgroundColor Red 'El numero seleccionado es el 7'
    }
8{
    Write-Host -BackgroundColor Red 'El numero seleccionado es el 8'
    }
9{
    Write-Host -BackgroundColor Red 'El numero seleccionado es el 9'
    }
}

----------------------------CALCULADORA------------------------------------
Clear-Host
[int]$op1=
[int]$op2=
$operador=Read-Host 'qué operacion deseas hacer? 1-suma 2-resta 3-division 4-multiplicación 0-exit'
Switch($operador) {
1{
    Write-Host -BackgroundColor Red 'suma'
    [int]$op1=Read-Host 'dime un numero de la operacion'
    [int]$op2=Read-Host 'dime otro numero de la operacion'
    [int]$sumres=$op1+$op2
    Write-Host 'el resultado de la operacion es: ' -BackgroundColor Green $sumres
    }
2{
    Write-Host -BackgroundColor Blue 'resta'
    [int]$op1=Read-Host 'dime un numero de la operacion'
    [int]$op2=Read-Host 'dime otro numero de la operacion'
    [int]$resres=$op1-$op2
    Write-Host 'el resultado de la operacion es: ' -BackgroundColor Green $resres
    }
3{
    Write-Host -BackgroundColor Yellow 'division'
    [int]$op1=Read-Host 'dime un numero de la operacion'
    [int]$op2=Read-Host 'dime otro numero de la operacion'
    [int]$divres=$op1/$op2
    Write-Host 'el resultado de la operacion es: ' -BackgroundColor Green $divres
    }
4{
    Write-Host -BackgroundColor Yellow 'multiplicacion'
    [int]$op1=Read-Host 'dime un numero de la operacion'
    [int]$op2=Read-Host 'dime otro numero de la operacion'
    [int]$mulres=$op1*$op2
    Write-Host 'el resultado de la operacion es: ' -BackgroundColor Green $mulres
    }
0{
    Write-Host -BackgroundColor Red 'EXIT'
    }
}
----------------------------------------------------------------------
1-mostrar todos los directorios


2- mostrar los archivos ejecutablesi su ultimo acceso ordenado por el tamaño del archivo descendente

3- Hacer recuento unicamente de los ARCHIVOS de toda la esructura de archivos "c:\windows\system32"
    "recurse"

4- crea el alias "fulanito" que muestre los procesos del sistema

5_ mostrar los archivos con el atributo "hidden"

6- mostrar las conexiones TCP establecidas
    Get-NetTCPConnection | ? {$_.state -eq 'Established'}


pedido
r=op1+op2
r=White-host $r


for ($i = 0 ; $i -le 100 ; $i++) {
 if $
}

conexiones tcp establecidas netstat

--------CONEXIONES TCP ESTABLECIDAS-----------
Get-NetTCPConnection | ? {$_.state -eq 'Established'}

--------CONEXIONES TCP ESTABLECIDAS PUERTO 443---------
Get-NetTCPConnection | ? {$_.state -eq 'Established' $_.port -eq '443'}

--------CONEXIONES TCP EN UN ARCHIVO out-file----------
Get-NetTCPConnection | ? {$_.state -eq 'Established'} | Out-File -FilePath C:\Users\Alejandro\Desktop\salida.txt

--------EXPORTAR A ARCHIVO CSV (campos separados por comas)-----
gci | Export-csv C:\Users\usuario\Desktop\salida.csv

--------FIXEROS EN VARIABLE-----------------
Get-NetTCPConnection | ? {$_.State -eq 'established'} | Out-File -FilePath C:\Users\usuario\Desktop\salida.txt
$mifichero=get-content C:\Users\usuario\Desktop\salida.txt
$mifichero

--------SACA LA INICIAL DEL NOMBRE, 2 PRIMERAS LETRAS DEL PRIMER APELLIDO
2 ULTIMAS LETRAS DEL SEGUNDO APELLIDO-----------------------

$alumnos=Import-Csv C:\Users\usuario\Desktop\alumnes.csv

foreach ($linea in $alumnos) {
#genera numero random entre 0 y 9 y la gusrda en una variable
$num_random= Get-Random -Minimum 0 -Maximum 9

#sacamos la primera letra del campo "nombre" y la guardamos en una variable
$nom=$linea.nom.Substring(0, 1)

#sacamos las 2 primeras letras del primer apellido y la guardamos en una variable
$ll1=$linea.llinatge1.Substring(0, 2)

#(personal) mido el segundo apellido para restarle al indice, asi puedo coger las 2 ultimas del apellido
#(son las primeras, hacer igual que el 1er apellido)
$lengthll2=$linea.llinatge2.Length
$ll2=$linea.llinatge2.Substring($lengthll2 -2, 2)

#Juntamos todas las variables en una mediante la concatenación
$userr=$nom+$ll1+$ll2+$num_random

write-host $userr
}
----------------De un archivo csv sacar nombres de usuario-------7

$alumnos=Import-Csv C:\Users\usuario\Desktop\alumnes.csv

foreach ($linea in $alumnos) {
$num_random= Get-Random -Minimum 0 -Maximum 9
$nom=$linea.nom
$ll1=$linea.llinatge1
$ll2=$linea.llinatge2
$lengthll2=$linea.llinatge2.Length

$userr=$nom.Substring(0, 1)+$ll1.Substring(0, 2)+$ll2.Substring($lengthll2 -2, 2)+$num_random

$userr > ruta de archivo.txt
}

CRodo5
RNa204
EArta3
JLoon6
ISoon1
RNado5
JAlno7
-----------------CREAR USUARIOS-------------

PIDES UN DNI 9 posiciones 1 letra


------------------------COMPROBAR 9 DIGITOS--------------------

Pedir cadena de 9 numeros
comprobar i que cuente > 5 (mayores)
mostrar la posicion
comprobar que no sean mas de 9 numeros
    Si hay mas que salga mensage y salga del script


$cad=read-host ' 9 digitos:'
[int]$contador=0
if ($cad.Length -gt 9 -or $cad.Length -le 0)
{
Write-Host 'hay mas de 9 digitos'
break
}
else
{
for ($i=0;$i -lt $cad.Length;$i++){
$num=$cad.Substring($i,1)

    if ($num -ge 5)
    {
    write-host 'is more than 5: '$cad[$i] 'en la posicion:' $($i+1)
    $contador++
    }

}
}
Write-Host 'se han encontrado ' $contador 'numeros mayores o iguales que 5'

-------------llenar array ---------------
$numeros=@()
write-host 'empezamos'
for ($i =1; $i -le 12; $i++){
    $numeros+=$i
   
}
if ($numeros -contains '7') {
    write-host 'hola'
}
write-host 'terminamos' $numeros -NoNewline
